//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/TutorialAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TutorialAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TutorialAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TutorialAction"",
    ""maps"": [
        {
            ""name"": ""Continue"",
            ""id"": ""7eeb2d31-0d7e-4a79-b1f8-54ba2130f9ab"",
            ""actions"": [
                {
                    ""name"": ""PlayerAction"",
                    ""type"": ""Button"",
                    ""id"": ""ef80a109-43d1-4ac2-bce8-91c5b3307f32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9e730cd-cc75-40f1-af99-79f5c0035da7"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Continue
        m_Continue = asset.FindActionMap("Continue", throwIfNotFound: true);
        m_Continue_PlayerAction = m_Continue.FindAction("PlayerAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Continue
    private readonly InputActionMap m_Continue;
    private IContinueActions m_ContinueActionsCallbackInterface;
    private readonly InputAction m_Continue_PlayerAction;
    public struct ContinueActions
    {
        private @TutorialAction m_Wrapper;
        public ContinueActions(@TutorialAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerAction => m_Wrapper.m_Continue_PlayerAction;
        public InputActionMap Get() { return m_Wrapper.m_Continue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ContinueActions set) { return set.Get(); }
        public void SetCallbacks(IContinueActions instance)
        {
            if (m_Wrapper.m_ContinueActionsCallbackInterface != null)
            {
                @PlayerAction.started -= m_Wrapper.m_ContinueActionsCallbackInterface.OnPlayerAction;
                @PlayerAction.performed -= m_Wrapper.m_ContinueActionsCallbackInterface.OnPlayerAction;
                @PlayerAction.canceled -= m_Wrapper.m_ContinueActionsCallbackInterface.OnPlayerAction;
            }
            m_Wrapper.m_ContinueActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerAction.started += instance.OnPlayerAction;
                @PlayerAction.performed += instance.OnPlayerAction;
                @PlayerAction.canceled += instance.OnPlayerAction;
            }
        }
    }
    public ContinueActions @Continue => new ContinueActions(this);
    public interface IContinueActions
    {
        void OnPlayerAction(InputAction.CallbackContext context);
    }
}
